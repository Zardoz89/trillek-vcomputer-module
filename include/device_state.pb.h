// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_state.proto

#ifndef PROTOBUF_device_5fstate_2eproto__INCLUDED
#define PROTOBUF_device_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace trillek {
namespace computer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_device_5fstate_2eproto();
void protobuf_AssignDesc_device_5fstate_2eproto();
void protobuf_ShutdownFile_device_5fstate_2eproto();

class DeviceState;
class DeviceState_DeviceProperty;

enum DeviceState_DeviceProperty_Type {
  DeviceState_DeviceProperty_Type_BOOL = 0,
  DeviceState_DeviceProperty_Type_STRING = 1,
  DeviceState_DeviceProperty_Type_INT = 2,
  DeviceState_DeviceProperty_Type_FLOAT = 3,
  DeviceState_DeviceProperty_Type_LONG = 4,
  DeviceState_DeviceProperty_Type_RAW = 5
};
bool DeviceState_DeviceProperty_Type_IsValid(int value);
const DeviceState_DeviceProperty_Type DeviceState_DeviceProperty_Type_Type_MIN = DeviceState_DeviceProperty_Type_BOOL;
const DeviceState_DeviceProperty_Type DeviceState_DeviceProperty_Type_Type_MAX = DeviceState_DeviceProperty_Type_RAW;
const int DeviceState_DeviceProperty_Type_Type_ARRAYSIZE = DeviceState_DeviceProperty_Type_Type_MAX + 1;

// ===================================================================

class DeviceState_DeviceProperty : public ::google::protobuf::MessageLite {
 public:
  DeviceState_DeviceProperty();
  virtual ~DeviceState_DeviceProperty();

  DeviceState_DeviceProperty(const DeviceState_DeviceProperty& from);

  inline DeviceState_DeviceProperty& operator=(const DeviceState_DeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeviceState_DeviceProperty& default_instance();

  enum ValueCase {
    kBvalue = 3,
    kSvalue = 4,
    kIvalue = 5,
    kLvalue = 6,
    kFvalue = 7,
    kRvalue = 8,
    VALUE_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceState_DeviceProperty* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceState_DeviceProperty* other);

  // implements Message ----------------------------------------------

  DeviceState_DeviceProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceState_DeviceProperty& from);
  void MergeFrom(const DeviceState_DeviceProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DeviceState_DeviceProperty_Type Type;
  static const Type BOOL = DeviceState_DeviceProperty_Type_BOOL;
  static const Type STRING = DeviceState_DeviceProperty_Type_STRING;
  static const Type INT = DeviceState_DeviceProperty_Type_INT;
  static const Type FLOAT = DeviceState_DeviceProperty_Type_FLOAT;
  static const Type LONG = DeviceState_DeviceProperty_Type_LONG;
  static const Type RAW = DeviceState_DeviceProperty_Type_RAW;
  static inline bool Type_IsValid(int value) {
    return DeviceState_DeviceProperty_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DeviceState_DeviceProperty_Type_Type_MIN;
  static const Type Type_MAX =
    DeviceState_DeviceProperty_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DeviceState_DeviceProperty_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .trillek.computer.DeviceState.DeviceProperty.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::trillek::computer::DeviceState_DeviceProperty_Type type() const;
  inline void set_type(::trillek::computer::DeviceState_DeviceProperty_Type value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool bvalue = 3;
  inline bool has_bvalue() const;
  inline void clear_bvalue();
  static const int kBvalueFieldNumber = 3;
  inline bool bvalue() const;
  inline void set_bvalue(bool value);

  // optional string svalue = 4;
  inline bool has_svalue() const;
  inline void clear_svalue();
  static const int kSvalueFieldNumber = 4;
  inline const ::std::string& svalue() const;
  inline void set_svalue(const ::std::string& value);
  inline void set_svalue(const char* value);
  inline void set_svalue(const char* value, size_t size);
  inline ::std::string* mutable_svalue();
  inline ::std::string* release_svalue();
  inline void set_allocated_svalue(::std::string* svalue);

  // optional uint32 ivalue = 5;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIvalueFieldNumber = 5;
  inline ::google::protobuf::uint32 ivalue() const;
  inline void set_ivalue(::google::protobuf::uint32 value);

  // optional uint64 lvalue = 6;
  inline bool has_lvalue() const;
  inline void clear_lvalue();
  static const int kLvalueFieldNumber = 6;
  inline ::google::protobuf::uint64 lvalue() const;
  inline void set_lvalue(::google::protobuf::uint64 value);

  // optional float fvalue = 7;
  inline bool has_fvalue() const;
  inline void clear_fvalue();
  static const int kFvalueFieldNumber = 7;
  inline float fvalue() const;
  inline void set_fvalue(float value);

  // optional bytes rvalue = 8;
  inline bool has_rvalue() const;
  inline void clear_rvalue();
  static const int kRvalueFieldNumber = 8;
  inline const ::std::string& rvalue() const;
  inline void set_rvalue(const ::std::string& value);
  inline void set_rvalue(const char* value);
  inline void set_rvalue(const void* value, size_t size);
  inline ::std::string* mutable_rvalue();
  inline ::std::string* release_rvalue();
  inline void set_allocated_rvalue(::std::string* rvalue);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:trillek.computer.DeviceState.DeviceProperty)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bvalue();
  inline void set_has_svalue();
  inline void set_has_ivalue();
  inline void set_has_lvalue();
  inline void set_has_fvalue();
  inline void set_has_rvalue();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  union ValueUnion {
    bool bvalue_;
    ::std::string* svalue_;
    ::google::protobuf::uint32 ivalue_;
    ::google::protobuf::uint64 lvalue_;
    float fvalue_;
    ::std::string* rvalue_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_device_5fstate_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_device_5fstate_2eproto();
  #endif
  friend void protobuf_AssignDesc_device_5fstate_2eproto();
  friend void protobuf_ShutdownFile_device_5fstate_2eproto();

  void InitAsDefaultInstance();
  static DeviceState_DeviceProperty* default_instance_;
};
// -------------------------------------------------------------------

class DeviceState : public ::google::protobuf::MessageLite {
 public:
  DeviceState();
  virtual ~DeviceState();

  DeviceState(const DeviceState& from);

  inline DeviceState& operator=(const DeviceState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeviceState& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceState* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceState* other);

  // implements Message ----------------------------------------------

  DeviceState* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceState& from);
  void MergeFrom(const DeviceState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DeviceState_DeviceProperty DeviceProperty;

  // accessors -------------------------------------------------------

  // required uint32 dev_type = 1;
  inline bool has_dev_type() const;
  inline void clear_dev_type();
  static const int kDevTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 dev_type() const;
  inline void set_dev_type(::google::protobuf::uint32 value);

  // required uint32 dev_subtype = 2;
  inline bool has_dev_subtype() const;
  inline void clear_dev_subtype();
  static const int kDevSubtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 dev_subtype() const;
  inline void set_dev_subtype(::google::protobuf::uint32 value);

  // required uint32 dev_id = 3;
  inline bool has_dev_id() const;
  inline void clear_dev_id();
  static const int kDevIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dev_id() const;
  inline void set_dev_id(::google::protobuf::uint32 value);

  // required uint32 dev_vendor_id = 4;
  inline bool has_dev_vendor_id() const;
  inline void clear_dev_vendor_id();
  static const int kDevVendorIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dev_vendor_id() const;
  inline void set_dev_vendor_id(::google::protobuf::uint32 value);

  // optional uint32 a = 5;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 5;
  inline ::google::protobuf::uint32 a() const;
  inline void set_a(::google::protobuf::uint32 value);

  // optional uint32 b = 6;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 6;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // optional uint32 c = 7;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 7;
  inline ::google::protobuf::uint32 c() const;
  inline void set_c(::google::protobuf::uint32 value);

  // optional uint32 d = 8;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 8;
  inline ::google::protobuf::uint32 d() const;
  inline void set_d(::google::protobuf::uint32 value);

  // optional uint32 e = 9;
  inline bool has_e() const;
  inline void clear_e();
  static const int kEFieldNumber = 9;
  inline ::google::protobuf::uint32 e() const;
  inline void set_e(::google::protobuf::uint32 value);

  // repeated .trillek.computer.DeviceState.DeviceProperty properties = 10;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 10;
  inline const ::trillek::computer::DeviceState_DeviceProperty& properties(int index) const;
  inline ::trillek::computer::DeviceState_DeviceProperty* mutable_properties(int index);
  inline ::trillek::computer::DeviceState_DeviceProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::trillek::computer::DeviceState_DeviceProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::trillek::computer::DeviceState_DeviceProperty >*
      mutable_properties();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeviceState)
  // @@protoc_insertion_point(class_scope:trillek.computer.DeviceState)
 private:
  inline void set_has_dev_type();
  inline void clear_has_dev_type();
  inline void set_has_dev_subtype();
  inline void clear_has_dev_subtype();
  inline void set_has_dev_id();
  inline void clear_has_dev_id();
  inline void set_has_dev_vendor_id();
  inline void clear_has_dev_vendor_id();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_e();
  inline void clear_has_e();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dev_type_;
  ::google::protobuf::uint32 dev_subtype_;
  ::google::protobuf::uint32 dev_id_;
  ::google::protobuf::uint32 dev_vendor_id_;
  ::google::protobuf::uint32 a_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 c_;
  ::google::protobuf::uint32 d_;
  ::google::protobuf::RepeatedPtrField< ::trillek::computer::DeviceState_DeviceProperty > properties_;
  ::google::protobuf::uint32 e_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_device_5fstate_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_device_5fstate_2eproto();
  #endif
  friend void protobuf_AssignDesc_device_5fstate_2eproto();
  friend void protobuf_ShutdownFile_device_5fstate_2eproto();

  void InitAsDefaultInstance();
  static DeviceState* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceState_DeviceProperty

// required .trillek.computer.DeviceState.DeviceProperty.Type type = 1;
inline bool DeviceState_DeviceProperty::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceState_DeviceProperty::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceState_DeviceProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceState_DeviceProperty::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trillek::computer::DeviceState_DeviceProperty_Type DeviceState_DeviceProperty::type() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.DeviceProperty.type)
  return static_cast< ::trillek::computer::DeviceState_DeviceProperty_Type >(type_);
}
inline void DeviceState_DeviceProperty::set_type(::trillek::computer::DeviceState_DeviceProperty_Type value) {
  assert(::trillek::computer::DeviceState_DeviceProperty_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.DeviceProperty.type)
}

// required string name = 2;
inline bool DeviceState_DeviceProperty::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceState_DeviceProperty::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceState_DeviceProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceState_DeviceProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeviceState_DeviceProperty::name() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.DeviceProperty.name)
  return *name_;
}
inline void DeviceState_DeviceProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.DeviceProperty.name)
}
inline void DeviceState_DeviceProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:trillek.computer.DeviceState.DeviceProperty.name)
}
inline void DeviceState_DeviceProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trillek.computer.DeviceState.DeviceProperty.name)
}
inline ::std::string* DeviceState_DeviceProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:trillek.computer.DeviceState.DeviceProperty.name)
  return name_;
}
inline ::std::string* DeviceState_DeviceProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceState_DeviceProperty::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:trillek.computer.DeviceState.DeviceProperty.name)
}

// optional bool bvalue = 3;
inline bool DeviceState_DeviceProperty::has_bvalue() const {
  return value_case() == kBvalue;
}
inline void DeviceState_DeviceProperty::set_has_bvalue() {
  _oneof_case_[0] = kBvalue;
}
inline void DeviceState_DeviceProperty::clear_bvalue() {
  if (has_bvalue()) {
    value_.bvalue_ = false;
    clear_has_value();
  }
}
inline bool DeviceState_DeviceProperty::bvalue() const {
  if (has_bvalue()) {
    return value_.bvalue_;
  }
  return false;
}
inline void DeviceState_DeviceProperty::set_bvalue(bool value) {
  if (!has_bvalue()) {
    clear_value();
    set_has_bvalue();
  }
  value_.bvalue_ = value;
}

// optional string svalue = 4;
inline bool DeviceState_DeviceProperty::has_svalue() const {
  return value_case() == kSvalue;
}
inline void DeviceState_DeviceProperty::set_has_svalue() {
  _oneof_case_[0] = kSvalue;
}
inline void DeviceState_DeviceProperty::clear_svalue() {
  if (has_svalue()) {
    delete value_.svalue_;
    clear_has_value();
  }
}
inline const ::std::string& DeviceState_DeviceProperty::svalue() const {
  if (has_svalue()) {
    return *value_.svalue_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DeviceState_DeviceProperty::set_svalue(const ::std::string& value) {
  if (!has_svalue()) {
    clear_value();
    set_has_svalue();
    value_.svalue_ = new ::std::string;
  }
  value_.svalue_->assign(value);
}
inline void DeviceState_DeviceProperty::set_svalue(const char* value) {
  if (!has_svalue()) {
    clear_value();
    set_has_svalue();
    value_.svalue_ = new ::std::string;
  }
  value_.svalue_->assign(value);
}
inline void DeviceState_DeviceProperty::set_svalue(const char* value, size_t size) {
  if (!has_svalue()) {
    clear_value();
    set_has_svalue();
    value_.svalue_ = new ::std::string;
  }
  value_.svalue_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceState_DeviceProperty::mutable_svalue() {
  if (!has_svalue()) {
    clear_value();
    set_has_svalue();
    value_.svalue_ = new ::std::string;
  }
  return value_.svalue_;
}
inline ::std::string* DeviceState_DeviceProperty::release_svalue() {
  if (has_svalue()) {
    clear_has_value();
    ::std::string* temp = value_.svalue_;
    value_.svalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DeviceState_DeviceProperty::set_allocated_svalue(::std::string* svalue) {
  clear_value();
  if (svalue) {
    set_has_svalue();
    value_.svalue_ = svalue;
  }
}

// optional uint32 ivalue = 5;
inline bool DeviceState_DeviceProperty::has_ivalue() const {
  return value_case() == kIvalue;
}
inline void DeviceState_DeviceProperty::set_has_ivalue() {
  _oneof_case_[0] = kIvalue;
}
inline void DeviceState_DeviceProperty::clear_ivalue() {
  if (has_ivalue()) {
    value_.ivalue_ = 0u;
    clear_has_value();
  }
}
inline ::google::protobuf::uint32 DeviceState_DeviceProperty::ivalue() const {
  if (has_ivalue()) {
    return value_.ivalue_;
  }
  return 0u;
}
inline void DeviceState_DeviceProperty::set_ivalue(::google::protobuf::uint32 value) {
  if (!has_ivalue()) {
    clear_value();
    set_has_ivalue();
  }
  value_.ivalue_ = value;
}

// optional uint64 lvalue = 6;
inline bool DeviceState_DeviceProperty::has_lvalue() const {
  return value_case() == kLvalue;
}
inline void DeviceState_DeviceProperty::set_has_lvalue() {
  _oneof_case_[0] = kLvalue;
}
inline void DeviceState_DeviceProperty::clear_lvalue() {
  if (has_lvalue()) {
    value_.lvalue_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 DeviceState_DeviceProperty::lvalue() const {
  if (has_lvalue()) {
    return value_.lvalue_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void DeviceState_DeviceProperty::set_lvalue(::google::protobuf::uint64 value) {
  if (!has_lvalue()) {
    clear_value();
    set_has_lvalue();
  }
  value_.lvalue_ = value;
}

// optional float fvalue = 7;
inline bool DeviceState_DeviceProperty::has_fvalue() const {
  return value_case() == kFvalue;
}
inline void DeviceState_DeviceProperty::set_has_fvalue() {
  _oneof_case_[0] = kFvalue;
}
inline void DeviceState_DeviceProperty::clear_fvalue() {
  if (has_fvalue()) {
    value_.fvalue_ = 0;
    clear_has_value();
  }
}
inline float DeviceState_DeviceProperty::fvalue() const {
  if (has_fvalue()) {
    return value_.fvalue_;
  }
  return 0;
}
inline void DeviceState_DeviceProperty::set_fvalue(float value) {
  if (!has_fvalue()) {
    clear_value();
    set_has_fvalue();
  }
  value_.fvalue_ = value;
}

// optional bytes rvalue = 8;
inline bool DeviceState_DeviceProperty::has_rvalue() const {
  return value_case() == kRvalue;
}
inline void DeviceState_DeviceProperty::set_has_rvalue() {
  _oneof_case_[0] = kRvalue;
}
inline void DeviceState_DeviceProperty::clear_rvalue() {
  if (has_rvalue()) {
    delete value_.rvalue_;
    clear_has_value();
  }
}
inline const ::std::string& DeviceState_DeviceProperty::rvalue() const {
  if (has_rvalue()) {
    return *value_.rvalue_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DeviceState_DeviceProperty::set_rvalue(const ::std::string& value) {
  if (!has_rvalue()) {
    clear_value();
    set_has_rvalue();
    value_.rvalue_ = new ::std::string;
  }
  value_.rvalue_->assign(value);
}
inline void DeviceState_DeviceProperty::set_rvalue(const char* value) {
  if (!has_rvalue()) {
    clear_value();
    set_has_rvalue();
    value_.rvalue_ = new ::std::string;
  }
  value_.rvalue_->assign(value);
}
inline void DeviceState_DeviceProperty::set_rvalue(const void* value, size_t size) {
  if (!has_rvalue()) {
    clear_value();
    set_has_rvalue();
    value_.rvalue_ = new ::std::string;
  }
  value_.rvalue_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceState_DeviceProperty::mutable_rvalue() {
  if (!has_rvalue()) {
    clear_value();
    set_has_rvalue();
    value_.rvalue_ = new ::std::string;
  }
  return value_.rvalue_;
}
inline ::std::string* DeviceState_DeviceProperty::release_rvalue() {
  if (has_rvalue()) {
    clear_has_value();
    ::std::string* temp = value_.rvalue_;
    value_.rvalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DeviceState_DeviceProperty::set_allocated_rvalue(::std::string* rvalue) {
  clear_value();
  if (rvalue) {
    set_has_rvalue();
    value_.rvalue_ = rvalue;
  }
}

inline bool DeviceState_DeviceProperty::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void DeviceState_DeviceProperty::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline DeviceState_DeviceProperty::ValueCase DeviceState_DeviceProperty::value_case() const {
  return DeviceState_DeviceProperty::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeviceState

// required uint32 dev_type = 1;
inline bool DeviceState::has_dev_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceState::set_has_dev_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceState::clear_has_dev_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceState::clear_dev_type() {
  dev_type_ = 0u;
  clear_has_dev_type();
}
inline ::google::protobuf::uint32 DeviceState::dev_type() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.dev_type)
  return dev_type_;
}
inline void DeviceState::set_dev_type(::google::protobuf::uint32 value) {
  set_has_dev_type();
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.dev_type)
}

// required uint32 dev_subtype = 2;
inline bool DeviceState::has_dev_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceState::set_has_dev_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceState::clear_has_dev_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceState::clear_dev_subtype() {
  dev_subtype_ = 0u;
  clear_has_dev_subtype();
}
inline ::google::protobuf::uint32 DeviceState::dev_subtype() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.dev_subtype)
  return dev_subtype_;
}
inline void DeviceState::set_dev_subtype(::google::protobuf::uint32 value) {
  set_has_dev_subtype();
  dev_subtype_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.dev_subtype)
}

// required uint32 dev_id = 3;
inline bool DeviceState::has_dev_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceState::set_has_dev_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceState::clear_has_dev_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceState::clear_dev_id() {
  dev_id_ = 0u;
  clear_has_dev_id();
}
inline ::google::protobuf::uint32 DeviceState::dev_id() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.dev_id)
  return dev_id_;
}
inline void DeviceState::set_dev_id(::google::protobuf::uint32 value) {
  set_has_dev_id();
  dev_id_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.dev_id)
}

// required uint32 dev_vendor_id = 4;
inline bool DeviceState::has_dev_vendor_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceState::set_has_dev_vendor_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceState::clear_has_dev_vendor_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceState::clear_dev_vendor_id() {
  dev_vendor_id_ = 0u;
  clear_has_dev_vendor_id();
}
inline ::google::protobuf::uint32 DeviceState::dev_vendor_id() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.dev_vendor_id)
  return dev_vendor_id_;
}
inline void DeviceState::set_dev_vendor_id(::google::protobuf::uint32 value) {
  set_has_dev_vendor_id();
  dev_vendor_id_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.dev_vendor_id)
}

// optional uint32 a = 5;
inline bool DeviceState::has_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceState::set_has_a() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceState::clear_has_a() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceState::clear_a() {
  a_ = 0u;
  clear_has_a();
}
inline ::google::protobuf::uint32 DeviceState::a() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.a)
  return a_;
}
inline void DeviceState::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.a)
}

// optional uint32 b = 6;
inline bool DeviceState::has_b() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceState::set_has_b() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceState::clear_has_b() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceState::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 DeviceState::b() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.b)
  return b_;
}
inline void DeviceState::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.b)
}

// optional uint32 c = 7;
inline bool DeviceState::has_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceState::set_has_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceState::clear_has_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceState::clear_c() {
  c_ = 0u;
  clear_has_c();
}
inline ::google::protobuf::uint32 DeviceState::c() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.c)
  return c_;
}
inline void DeviceState::set_c(::google::protobuf::uint32 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.c)
}

// optional uint32 d = 8;
inline bool DeviceState::has_d() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceState::set_has_d() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceState::clear_has_d() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceState::clear_d() {
  d_ = 0u;
  clear_has_d();
}
inline ::google::protobuf::uint32 DeviceState::d() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.d)
  return d_;
}
inline void DeviceState::set_d(::google::protobuf::uint32 value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.d)
}

// optional uint32 e = 9;
inline bool DeviceState::has_e() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceState::set_has_e() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceState::clear_has_e() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceState::clear_e() {
  e_ = 0u;
  clear_has_e();
}
inline ::google::protobuf::uint32 DeviceState::e() const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.e)
  return e_;
}
inline void DeviceState::set_e(::google::protobuf::uint32 value) {
  set_has_e();
  e_ = value;
  // @@protoc_insertion_point(field_set:trillek.computer.DeviceState.e)
}

// repeated .trillek.computer.DeviceState.DeviceProperty properties = 10;
inline int DeviceState::properties_size() const {
  return properties_.size();
}
inline void DeviceState::clear_properties() {
  properties_.Clear();
}
inline const ::trillek::computer::DeviceState_DeviceProperty& DeviceState::properties(int index) const {
  // @@protoc_insertion_point(field_get:trillek.computer.DeviceState.properties)
  return properties_.Get(index);
}
inline ::trillek::computer::DeviceState_DeviceProperty* DeviceState::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:trillek.computer.DeviceState.properties)
  return properties_.Mutable(index);
}
inline ::trillek::computer::DeviceState_DeviceProperty* DeviceState::add_properties() {
  // @@protoc_insertion_point(field_add:trillek.computer.DeviceState.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trillek::computer::DeviceState_DeviceProperty >&
DeviceState::properties() const {
  // @@protoc_insertion_point(field_list:trillek.computer.DeviceState.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::trillek::computer::DeviceState_DeviceProperty >*
DeviceState::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:trillek.computer.DeviceState.properties)
  return &properties_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace computer
}  // namespace trillek

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5fstate_2eproto__INCLUDED
