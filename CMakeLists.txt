cmake_minimum_required(VERSION 2.8)

PROJECT(VCOMPUTER)
INCLUDE(InstallRequiredSystemLibraries)

# Set the directory where to find cmake "modules"
SET (CMAKE_MODULE_PATH ${VCOMPUTER_SOURCE_DIR}/cmake)

# Put the executable in the bin folder
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

# Install the libraries using bin folder as root
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/lib")

# Check if we can compile with the current chaintool
INCLUDE(Platform)

INCLUDE(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)

# Project generic variables
SET(VCOMP_VERSION_MAJOR 0)
SET(VCOMP_VERSION_MINOR 6)
SET(VCOMP_VERSION_PATCH 0)
SET(VCOMP_VERSION_STRING ${VCOMP_VERSION_MAJOR}.${VCOMP_VERSION_MINOR}.${VCOMP_VERSION_PATCH})

SET(VCOMP_BUILD "${GIT_SHA1}") # Try to use git files to get hash

MESSAGE(STATUS "Trillek Virtual Computer version "
    ${VCOMP_VERSION_STRING} " Build " ${VCOMP_BUILD})

# Debug build ?
IF (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    MESSAGE(STATUS "Debug build")
    ADD_DEFINITIONS(-DDEBUG)
ENDIF (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")

## Options !!!
SET(BUILD_STATIC_VCOMPUTER TRUE CACHE BOOL "Build Trillek VCOMPUTER library - static version")
SET(BUILD_DYNAMIC_VCOMPUTER TRUE CACHE BOOL "Build Trillek VCOMPUTER library - dynamic version")

# Options for optional compiling stuff
SET(BUILD_TOOLS_VCOMPUTER TRUE CACHE BOOL "Build Trillek VCOMPUTER tools")
SET(BUILD_TESTS_VCOMPUTER TRUE CACHE BOOL "Build Trillek VCOMPUTER tests")

# Optiones that affect functionality
SET(BRKPOINTS_ENABLED 1 CACHE INT "Enables Break Points functionality")

IF (BRKPOINTS_ENABLED)
    MESSAGE(STATUS "Breakpoints functionality enabled")
ENDIF (BRKPOINTS_ENABLED)

IF (NOT BUILD_STATIC_VCOMPUTER AND NOT BUILD_DYNAMIC_VCOMPUTER)
    IF(NOT WIN32)
        STRING(ASCII 27 Esc)
    ENDIF(NOT WIN32)
    MESSAGE(FATAL_ERROR "${Esc}[31mWTF! Choose Dynamic or Static or both!!!${Esc}[m")
ENDIF()

# Include dirs
SET(VCOMPUTER_INCLUDE_DIRS
    ${PROJECT_BINARY_DIR}
    ${VCOMPUTER_SOURCE_DIR}/include
    ${VCOMPUTER_SOURCE_DIR}/src
    )

# Source dirs
FILE(GLOB VCOMPUTER_SRC
    "src/*.cpp"
    "src/tr3200/*.cpp"
    "src/devices/*.cpp"
    "src/*.cc"
    "src/tr3200/*.cc"
    "src/devices/*.cc"
    "src/*.hpp"
    "src/tr3200/*.hpp"
    "src/devices/*.hpp"
    "src/*.inc"
    "src/tr3200/*.inc"
    "src/devices/*.inc"
    "include/*.hpp"
    "include/tr3200/*.hpp"
    "include/devices/*.hpp"
    "include/*.h"
    "include/tr3200/*.h"
    "include/devices/*.h"
    )

# Apply all configuration stuff to config.hpp.in
CONFIGURE_FILE (src/config.hpp.in
    "${PROJECT_BINARY_DIR}/config.hpp" )
# Apply all configuration stuff to vc_dll.hpp.in
CONFIGURE_FILE (include/vc_dll.hpp.in
    "${VCOMPUTER_SOURCE_DIR}/include/vc_dll.hpp" )

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
# If we are on windows add in the local search directories as well.
IF (WIN32 AND NOT MINGW) # Windows
    SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${CMAKE_SOURCE_DIR}/lib/include/)
    INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/lib/include/")
    IF (CMAKE_CL_64)
        LINK_DIRECTORIES("${CMAKE_SOURCE_DIR}/lib/x64/debug" "${CMAKE_SOURCE_DIR}/lib/x64/release")
        SET(CMAKE_LIBRARY_PATH ${CMAKE_SOURCE_DIR}/lib/x64/debug ${CMAKE_SOURCE_DIR}/lib/x64/release)
    ELSE (CMAKE_CL_64)
        LINK_DIRECTORIES("${CMAKE_SOURCE_DIR}/lib/x86/debug" "${CMAKE_SOURCE_DIR}/lib/x86/release")
        SET(CMAKE_LIBRARY_PATH ${CMAKE_SOURCE_DIR}/lib/x86/debug ${CMAKE_SOURCE_DIR}/lib/x86/release)
    ENDIF (CMAKE_CL_64)
ENDIF (WIN32 AND NOT MINGW)


MESSAGE(STATUS "Procesing Source Code - Build library")
# VCOMPUTER VM core lib
IF(BUILD_STATIC_VCOMPUTER)
    MESSAGE(STATUS "Building VComputer library - Static version")
    ADD_LIBRARY( VCOMPUTER_STATIC STATIC
        ${VCOMPUTER_SRC}
        )

    INCLUDE_DIRECTORIES(VCOMPUTER_STATIC
        ${VCOMPUTER_INCLUDE_DIRS}
        )
ENDIF(BUILD_STATIC_VCOMPUTER)

IF(BUILD_DYNAMIC_VCOMPUTER)
    MESSAGE(STATUS "Building VComputer library - Dynamic (DLL) version")
    ADD_LIBRARY( VCOMPUTER SHARED
        ${VCOMPUTER_SRC}
        )

    INCLUDE_DIRECTORIES(VCOMPUTER
        ${VCOMPUTER_INCLUDE_DIRS}
        )
ENDIF(BUILD_DYNAMIC_VCOMPUTER)

# Enforces to use dllexport on shared library on Windows
IF(WIN32)
    SET_TARGET_PROPERTIES (VCOMPUTER PROPERTIES COMPILE_DEFINITIONS
        "DLL_EXPORT;BUILD_DLL_VCOMPUTER"
        )
ENDIF(WIN32)

# Version of the libs
IF(BUILD_DYNAMIC_VCOMPUTER)
SET_TARGET_PROPERTIES(VCOMPUTER PROPERTIES
    VERSION ${VCOMP_VERSION_STRING}
    SOVERSION ${VCOMP_VERSION_MAJOR}
    )
ENDIF(BUILD_DYNAMIC_VCOMPUTER)

IF(BUILD_STATIC_VCOMPUTER)
    SET_TARGET_PROPERTIES(VCOMPUTER_STATIC PROPERTIES
        VERSION ${VCOMP_VERSION_STRING}
        SOVERSION ${VCOMP_VERSION_MAJOR}
        )
ENDIF(BUILD_STATIC_VCOMPUTER)

IF(BUILD_TOOLS_VCOMPUTER)
    MESSAGE(STATUS "Procesing Tools")
    ADD_SUBDIRECTORY(tools)

    MESSAGE(STATUS "Procesing Assets")
    ADD_SUBDIRECTORY(assets)
    INSTALL(CODE "MESSAGE(\"Installing assets\")")
    IF(WIN32)
      INSTALL(DIRECTORY assets/
          COMPONENT assets
          DESTINATION assets
          FILES_MATCHING
              PATTERN "*.frag"
              PATTERN "*.vert"
          )
    ELSE(WIN32)
      INSTALL(DIRECTORY assets/
          COMPONENT assets
          DESTINATION share/trillek-tools/assets
          FILES_MATCHING
              PATTERN "*.frag"
              PATTERN "*.vert"
          )
    ENDIF(WIN32)
    SET(COMPONENTS ${COMPONENTS} "assets")

ENDIF(BUILD_TOOLS_VCOMPUTER)

IF(BUILD_TESTS_VCOMPUTER)
    MESSAGE(STATUS "Procesing Tests")
    ENABLE_TESTING()

    ADD_SUBDIRECTORY(tests)
    SET(COMPONENTS ${COMPONENTS} "toolsbin")

ENDIF(BUILD_TESTS_VCOMPUTER)

# Install of library
INSTALL(CODE "MESSAGE(\"Installing library headers\")")
INSTALL(DIRECTORY include/
    COMPONENT headers
    DESTINATION include/tr-vcomputer
    PATTERN "*.in" EXCLUDE
    PATTERN "*.*~" EXCLUDE
    )
SET(COMPONENTS ${COMPONENTS} "headers")

IF(BUILD_DYNAMIC_VCOMPUTER)
    INSTALL(CODE "MESSAGE(\"Installing dinamic library\")")
    INSTALL(TARGETS VCOMPUTER
        COMPONENT dlibrary
        EXPORT VCOMPUTER
        RUNTIME DESTINATION bin
        ARCHIVE DESTINATION lib/static
        LIBRARY DESTINATION lib
        )
    SET(COMPONENTS ${COMPONENTS} "dlibrary")
ENDIF(BUILD_DYNAMIC_VCOMPUTER)

IF(BUILD_STATIC_VCOMPUTER)
    INSTALL(CODE "MESSAGE(\"Installing static library\")")
    INSTALL(TARGETS VCOMPUTER_STATIC
        COMPONENT slibrary
        EXPORT VCOMPUTER
        RUNTIME DESTINATION bin
        ARCHIVE DESTINATION lib/static
        LIBRARY DESTINATION lib
        )
    SET(COMPONENTS ${COMPONENTS} "slibrary")
ENDIF(BUILD_STATIC_VCOMPUTER)

# Package generation stuff
SET(CPACK_PACKAGE_NAME "TrillekVComputer")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Trillek Virtual Computer library")
SET(CPACK_PACKAGE_VENDOR "Trillek")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_PACKAGE_VERSION_MAJOR ${VCOMP_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${VCOMP_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${VCOMP_VERSION_PATCH})
SET(CPACK_PACKAGE_VERSION ${VCOMP_VERSION_STRING})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Trillek VComputer")
SET(CPACK_DEBIAN_PACKAGE_HOMEPAGE "http://trillek.org/" )
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Luis Panadero Guarde√±o" )
SET(CPACK_RPM_PACKAGE_LICENSE "LGPL 3")
SET(CPACK_NSIS_MODIFY_PATH ON)

SET(CPACK_COMPONENTS_ALL ${COMPONENTS})
SET(CPACK_COMPONENT_SLIBRARY_DISPLAY_NAME "Static Library")
SET(CPACK_COMPONENT_SLIBRARY_DESCRIPTION "Static version of the library")
SET(CPACK_COMPONENT_SLIBRARY_GROUP "Library")

SET(CPACK_COMPONENT_DLIBRARY_DISPLAY_NAME "Dynamic Library")
SET(CPACK_COMPONENT_DLIBRARY_DESCRIPTION "Dynamic version of the library")
SET(CPACK_COMPONENT_DLIBRARY_GROUP "Library")

SET(CPACK_COMPONENT_HEADERS_DISPLAY_NAME "C++ Headers")
SET(CPACK_COMPONENT_HEADERS_DESCRIPTION "C++ header files for development")
SET(CPACK_COMPONENT_HEADERS_DEPENDS SLIBRARY)
SET(CPACK_COMPONENT_HEADERS_GROUP "Header")

SET(CPACK_COMPONENT_TOOLSBIN_DEPENDS SLIBRARY)
SET(CPACK_COMPONENT_TOOLSBIN_DEPENDS ASSETS)
SET(CPACK_COMPONENT_TOOLSBIN_GROUP "Tools")
SET(CPACK_COMPONENT_TOOLSBIN_DISPLAY_NAME "Tools")
SET(CPACK_COMPONENT_TOOLSBIN_DESCRIPTION "Virtual Computer tools, including toy emulator")
SET(CPACK_COMPONENT_ASSETS_GROUP "Tools")
SET(CPACK_COMPONENT_ASSETS_DISPLAY_NAME "Assets")
SET(CPACK_COMPONENT_ASSETS_DESCRIPTION "Assets required by tools")

SET(CPACK_COMPONENT_GROUP_TOOLS_DESCRIPTION "Virtual Computer tools, including toy emulator")
SET(CPACK_COMPONENT_GROUP_LIBRARY_DESCRIPTION "Virtual Computer libraries")
SET(CPACK_COMPONENT_GROUP_HEADER_DESCRIPTION "C++ header files for development")

SET(CPACK_SOURCE_TOPLEVEL_TAG      "source")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
SET(CPACK_SOURCE_IGNORE_FILES      "/\\\\.git/;\\\\.swp$;\\\\.#;/#;\\\\.*~;cscope\\\\.*;/[Bb]uild[.+-_a-zA-Z0-9]*/")

SET(CPACK_DEB_COMPONENT_INSTALL ON)
SET(CPACK_RPM_COMPONENT_INSTALL ON)
SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON)

# Try to use apropiate generators for every system and other stuff
# system/architecture
IF (WIN32)
    IF (CMAKE_CL_64)
        SET (CPACK_SYSTEM_NAME "win64")
    ELSE ()
        SET (CPACK_SYSTEM_NAME "win32")
    ENDIF ()
    SET (CPACK_PACKAGE_ARCHITECTURE)

ELSEIF (APPLE)
    SET (CPACK_PACKAGE_ARCHITECTURE darwin)

ELSE () # *nix
    STRING (TOLOWER "${CMAKE_SYSTEM_NAME}" CPACK_SYSTEM_NAME)
    IF (CMAKE_CXX_FLAGS MATCHES "-m32")
        SET (CPACK_PACKAGE_ARCHITECTURE i386)
    ELSE ()
        # Try dpkg
        EXECUTE_PROCESS (
            COMMAND         dpkg --print-architecture
            RESULT_VARIABLE RV
            OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE
        )
        IF (RV EQUAL 0)
            STRING (STRIP "${CPACK_PACKAGE_ARCHITECTURE}" CPACK_PACKAGE_ARCHITECTURE)
        ELSE ()
            # Try uname -m
            EXECUTE_PROCESS (COMMAND uname -m OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE)
            IF (CPACK_PACKAGE_ARCHITECTURE MATCHES "x86_64")
                SET (CPACK_PACKAGE_ARCHITECTURE amd64)
            ELSE ()
                SET (CPACK_PACKAGE_ARCHITECTURE i386)
            ENDIF ()
        ENDIF ()
    ENDIF ()
ENDIF ()

# Build package filenmae
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
IF(CPACK_PACKAGE_ARCHITECTURE)
    SET (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-${CPACK_PACKAGE_ARCHITECTURE}")
ENDIF ()
IF(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    SET (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-debug")
ENDIF()

IF(WIN32)
    SET(GENERATORS "ZIP")
    SET(SRC_GENERATORS "ZIP")
ELSE(WIN32)
    SET(GENERATORS "STGZ;TGZ")
    SET(SRC_GENERATORS "TGZ")

    IF(UNIX AND NOT APPLE) # GNU Linux and perhaps BSDs
        SET(GENERATORS "${GENERATORS};DEB")
        SET(SRC_GENERATORS "${SRC_GENERATORS};DEB")

        FIND_PROGRAM(RPMBUILD_EXECUTABLE rpmbuild)
        IF(RPMBUILD_EXECUTABLE)
            SET(GENERATORS "${GENERATORS};RPM")
            SET(SRC_GENERATORS "${SRC_GENERATORS};RPM")
        ENDIF()
    ELSE() # Apple
        SET(GENERATORS "${GENERATORS};PackageMaker")
    ENDIF(UNIX AND NOT APPLE)

ENDIF(WIN32)

FIND_PROGRAM(NSISBUILD_EXECUTABLE makensis)
IF(NSISBUILD_EXECUTABLE)
    SET(GENERATORS "${GENERATORS};NSIS")
ENDIF(NSISBUILD_EXECUTABLE)

SET(CPACK_GENERATOR "${GENERATORS}")
SET(CPACK_SOURCE_GENERATOR "${SRC_GENERATORS}")

# generator specific configuration file
#
# allow package maintainers to use their own configuration file
# $ cmake -DCPACK_PROJECT_CONFIG_FILE:FILE=/path/to/package/config
IF (NOT CPACK_PROJECT_CONFIG_FILE)
    CONFIGURE_FILE (
        "${CMAKE_CURRENT_LIST_DIR}/cmake/package.cmake.in"
        "${PROJECT_BINARY_DIR}/${CPACK_PACKAGE_NAME}-package.cmake" @ONLY
    )
    SET(CPACK_PROJECT_CONFIG_FILE "${PROJECT_BINARY_DIR}/${CPACK_PACKAGE_NAME}-package.cmake")
ENDIF()

INCLUDE(CPack)
