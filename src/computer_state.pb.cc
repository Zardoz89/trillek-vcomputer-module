// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: computer_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "computer_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace trillek {
namespace computer {

void protobuf_ShutdownFile_computer_5fstate_2eproto() {
  delete DeviceSlot::default_instance_;
  delete ComputerState::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_computer_5fstate_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_computer_5fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::trillek::computer::protobuf_AddDesc_device_5fstate_2eproto();
  DeviceSlot::default_instance_ = new DeviceSlot();
  ComputerState::default_instance_ = new ComputerState();
  DeviceSlot::default_instance_->InitAsDefaultInstance();
  ComputerState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_computer_5fstate_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_computer_5fstate_2eproto_once_);
void protobuf_AddDesc_computer_5fstate_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_computer_5fstate_2eproto_once_,
                 &protobuf_AddDesc_computer_5fstate_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_computer_5fstate_2eproto {
  StaticDescriptorInitializer_computer_5fstate_2eproto() {
    protobuf_AddDesc_computer_5fstate_2eproto();
  }
} static_descriptor_initializer_computer_5fstate_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DeviceSlot::kSlotFieldNumber;
const int DeviceSlot::kDeviceFieldNumber;
#endif  // !_MSC_VER

DeviceSlot::DeviceSlot()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trillek.computer.DeviceSlot)
}

void DeviceSlot::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_ = const_cast< ::trillek::computer::DeviceState*>(
      ::trillek::computer::DeviceState::internal_default_instance());
#else
  device_ = const_cast< ::trillek::computer::DeviceState*>(&::trillek::computer::DeviceState::default_instance());
#endif
}

DeviceSlot::DeviceSlot(const DeviceSlot& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trillek.computer.DeviceSlot)
}

void DeviceSlot::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  device_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSlot::~DeviceSlot() {
  // @@protoc_insertion_point(destructor:trillek.computer.DeviceSlot)
  SharedDtor();
}

void DeviceSlot::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete device_;
  }
}

void DeviceSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceSlot& DeviceSlot::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_computer_5fstate_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_computer_5fstate_2eproto();
#endif
  return *default_instance_;
}

DeviceSlot* DeviceSlot::default_instance_ = NULL;

DeviceSlot* DeviceSlot::New() const {
  return new DeviceSlot;
}

void DeviceSlot::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    slot_ = 0u;
    if (has_device()) {
      if (device_ != NULL) device_->::trillek::computer::DeviceState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeviceSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:trillek.computer.DeviceSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // required .trillek.computer.DeviceState device = 2;
      case 2: {
        if (tag == 18) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trillek.computer.DeviceSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trillek.computer.DeviceSlot)
  return false;
#undef DO_
}

void DeviceSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trillek.computer.DeviceSlot)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // required .trillek.computer.DeviceState device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->device(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:trillek.computer.DeviceSlot)
}

int DeviceSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // required .trillek.computer.DeviceState device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSlot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceSlot*>(&from));
}

void DeviceSlot::MergeFrom(const DeviceSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_device()) {
      mutable_device()->::trillek::computer::DeviceState::MergeFrom(from.device());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeviceSlot::CopyFrom(const DeviceSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  return true;
}

void DeviceSlot::Swap(DeviceSlot* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceSlot::GetTypeName() const {
  return "trillek.computer.DeviceSlot";
}


// ===================================================================

#ifndef _MSC_VER
const int ComputerState::kIsOnFieldNumber;
const int ComputerState::kRamSizeFieldNumber;
const int ComputerState::kRomSizeFieldNumber;
const int ComputerState::kDevicesFieldNumber;
#endif  // !_MSC_VER

ComputerState::ComputerState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trillek.computer.ComputerState)
}

void ComputerState::InitAsDefaultInstance() {
}

ComputerState::ComputerState(const ComputerState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trillek.computer.ComputerState)
}

void ComputerState::SharedCtor() {
  _cached_size_ = 0;
  is_on_ = false;
  ram_size_ = 0u;
  rom_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComputerState::~ComputerState() {
  // @@protoc_insertion_point(destructor:trillek.computer.ComputerState)
  SharedDtor();
}

void ComputerState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ComputerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ComputerState& ComputerState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_computer_5fstate_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_computer_5fstate_2eproto();
#endif
  return *default_instance_;
}

ComputerState* ComputerState::default_instance_ = NULL;

ComputerState* ComputerState::New() const {
  return new ComputerState;
}

void ComputerState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComputerState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_on_, ram_size_);
    rom_size_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ComputerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:trillek.computer.ComputerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_on = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_)));
          set_has_is_on();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ram_size;
        break;
      }

      // required uint32 ram_size = 2;
      case 2: {
        if (tag == 16) {
         parse_ram_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_size_)));
          set_has_ram_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rom_size;
        break;
      }

      // optional uint32 rom_size = 3;
      case 3: {
        if (tag == 24) {
         parse_rom_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rom_size_)));
          set_has_rom_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_devices;
        break;
      }

      // repeated .trillek.computer.DeviceSlot devices = 10;
      case 10: {
        if (tag == 82) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trillek.computer.ComputerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trillek.computer.ComputerState)
  return false;
#undef DO_
}

void ComputerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trillek.computer.ComputerState)
  // optional bool is_on = 1;
  if (has_is_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_on(), output);
  }

  // required uint32 ram_size = 2;
  if (has_ram_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ram_size(), output);
  }

  // optional uint32 rom_size = 3;
  if (has_rom_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rom_size(), output);
  }

  // repeated .trillek.computer.DeviceSlot devices = 10;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->devices(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:trillek.computer.ComputerState)
}

int ComputerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_on = 1;
    if (has_is_on()) {
      total_size += 1 + 1;
    }

    // required uint32 ram_size = 2;
    if (has_ram_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ram_size());
    }

    // optional uint32 rom_size = 3;
    if (has_rom_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rom_size());
    }

  }
  // repeated .trillek.computer.DeviceSlot devices = 10;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputerState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComputerState*>(&from));
}

void ComputerState::MergeFrom(const ComputerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_on()) {
      set_is_on(from.is_on());
    }
    if (from.has_ram_size()) {
      set_ram_size(from.ram_size());
    }
    if (from.has_rom_size()) {
      set_rom_size(from.rom_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ComputerState::CopyFrom(const ComputerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  return true;
}

void ComputerState::Swap(ComputerState* other) {
  if (other != this) {
    std::swap(is_on_, other->is_on_);
    std::swap(ram_size_, other->ram_size_);
    std::swap(rom_size_, other->rom_size_);
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ComputerState::GetTypeName() const {
  return "trillek.computer.ComputerState";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace computer
}  // namespace trillek

// @@protoc_insertion_point(global_scope)
